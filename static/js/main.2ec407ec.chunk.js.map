{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Moviegenre","_ref2","genre","react_default","a","createElement","className","Movieimage","_ref3","poster","alt","src","Movie","_ref","title","genres","synopsis","map","index","key","App","state","_renderMovies","_this","movies","movie","src_Movie","title_long","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","console","log","setState","stop","this","fetch","then","nami","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAgDA,SAASA,EAATC,GAA6B,IAARC,EAAQD,EAARC,MACjB,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,OAAsCJ,GAI9C,SAASK,EAATC,GAAmC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IACzB,OACIP,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAQC,IAAKA,IAgBhBE,MAzCf,SAAAC,GAAkD,IAAlCC,EAAkCD,EAAlCC,MAAOL,EAA2BI,EAA3BJ,OAAQM,EAAmBF,EAAnBE,OAAQC,EAAWH,EAAXG,SACnC,OACIb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAACE,EAAD,CAAYE,OAAQA,EAAQC,IAAKI,KAErCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAKS,GACLX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACVS,EAAOE,IAAI,SAACf,EAAOgB,GAAR,OAAkBf,EAAAC,EAAAC,cAACL,EAAD,CAAYE,MAAOA,EAAOiB,IAAKD,OAEjEf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBU,MC4DjCI,6MAlFbC,MAAQ,KA4CRC,cAAgB,WAUZ,OATeC,EAAKF,MAAMG,OAAOP,IAAI,SAAAQ,GACjC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,CACLZ,MAAOW,EAAME,WACblB,OAAQgB,EAAMG,mBACdT,IAAKM,EAAMI,GACXd,OAAQU,EAAMV,OACdC,SAAUS,EAAMT,gBAM1Bc,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAA5B,EAAA6B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYb,EAAKc,WADjB,OACHb,EADGU,EAAAI,KAETC,QAAQC,IAAIhB,GACZD,EAAKkB,SAAS,CACVjB,WAJK,wBAAAU,EAAAQ,SAAAX,EAAAY,WAQbN,SAAW,WACP,OAAOO,MAAM,yDACZC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIX,QAAQC,IAAIU,uIAlD1BP,KAAKb,8CAuDP,OACI3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVqC,KAAKtB,MAAMG,OAASmB,KAAKrB,gBAAkB,uBAjFtC6B,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.2ec407ec.chunk.js","sourcesContent":["//import React, { Component } from 'react';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\n// class Movie extends Component {\r\n//\r\n//     static propTypes = {\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string\r\n//     }\r\n//\r\n//     render() {\r\n//         //console.log(this.props);\r\n//         return (\r\n//             <div>\r\n//                 <Movieimage poster={this.props.poster} />\r\n//                 <h1>{this.props.title}</h1>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// class Movieimg extends Component {\r\n//     render() {\r\n//         return (\r\n//             <img src={this.props.poster} />\r\n//         );\r\n//     }\r\n// }\r\n\r\nfunction Movie({title, poster, genres, synopsis}) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <Movieimage poster={poster} alt={title} />\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <Moviegenre genre={genre} key={index} />)}\r\n                </div>\r\n                <p className=\"Movie__synopsis\">{synopsis}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Moviegenre({genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">&nbsp;{genre}</span>\r\n    )\r\n}\r\n\r\nfunction Movieimage({poster, alt}) {\r\n    return (\r\n        <img src={poster} alt={alt} />\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMovieimage.propTypes = {\r\n    poster: PropTypes.string,\r\n    alt: PropTypes.string\r\n}\r\n\r\nexport default Movie;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// const movies = [\n//     {\n//         title: \"강남선\",\n//         poster: \"https://www.link1090.com/uploads/images/2018/12/a528f235afd18c563b2444a36a3473a5_1545030016047261300.jpg\"\n//     },\n//     {\n//         title: \"춘천선\",\n//         poster: \"https://www.link1090.com/uploads/images/2018/12/170a2e127ca4aadb438312543685e82d_1544971213079396800.jpg\"\n//     }\n// ]\n\nclass App extends Component {\n\n  // render: componentWillMount() -> render() -> componentDidMount()\n  // update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  state = {\n    // movies: [\n\n    //     {\n    //         title: \"강남선\",\n    //         poster: \"https://www.link1090.com/uploads/images/2018/12/a528f235afd18c563b2444a36a3473a5_1545030016047261300.jpg\"\n    //     },\n    //     {\n    //         title: \"춘천선\",\n    //         poster: \"https://www.link1090.com/uploads/images/2018/12/170a2e127ca4aadb438312543685e82d_1544971213079396800.jpg\"\n    //     }\n    // ]\n  }\n\n  componentWillMount() {\n      //console.log('will mount');\n  }\n\n  componentDidMount() {\n      this._getMovies();\n      // setTimeout(() => {\n      //     this.setState({\n      //         // movies: [\n      //         //     ...this.state.movies,\n      //         //     {\n      //         //         title: \"영동선\",\n      //         //         poster: \"https://www.link1090.com/uploads/images/2018/12/170a2e127ca4aadb438312543685e82d_1544971213079396800.jpg\"\n      //         //     }\n      //         // ]\n      //         movies: [\n      //             {\n      //                 title: \"강남선\",\n      //                 poster: \"https://www.link1090.com/uploads/images/2018/12/a528f235afd18c563b2444a36a3473a5_1545030016047261300.jpg\"\n      //             },\n      //             {\n      //                 title: \"춘천선\",\n      //                 poster: \"https://www.link1090.com/uploads/images/2018/12/170a2e127ca4aadb438312543685e82d_1544971213079396800.jpg\"\n      //             }\n      //         ]\n      //     })\n      // }, 5000)\n      // console.log('did mount');\n  }\n\n  _renderMovies = () => {\n      const movies = this.state.movies.map(movie => {\n          return <Movie\n            title={movie.title_long}\n            poster={movie.medium_cover_image}\n            key={movie.id}\n            genres={movie.genres}\n            synopsis={movie.synopsis}\n          />\n      })\n      return movies\n  }\n\n  _getMovies = async () => {\n      const movies = await this._callApi()\n      console.log(movies)\n      this.setState({\n          movies\n      })\n  }\n\n  _callApi = () => {\n      return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n      .then(nami => nami.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    //console.log('render');\n    return (\n        <div className=\"App\">\n            {this.state.movies ? this._renderMovies() : 'Loading.....'}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}